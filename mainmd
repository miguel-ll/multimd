#!/bin/sh

to_html()
{
[ "$1" = "-h" ] && printf "Example: mdhtml input.md > out.html\n" && exit

cat $1 | \
sed -E "s/(\*\*)(.{1,})(\*\*)/<b>\2<\/b>/" | \
sed -E "s/(\*)(.{1,})(\*)/<i>\2<\/i>/" | \
sed -E "s/(###### )(.{1,})/<h6>\2<\/h6>/" | \
sed -E "s/(##### )(.{1,})/<h5>\2<\/h5>/" | \
sed -E "s/(#### )(.{1,})/<h4>\2<\/h4>/" | \
sed -E "s/(### )(.{1,})/<h3>\2<\/h3>/" | \
sed -E "s/(## )(.{1,})/<h2>\2<\/h2>/" | \
sed -E "s/(# )(.{1,})/<h1>\2<\/h1>/" | \
sed -E "s/\\\\$/<br>/gm" | \
sed -E "s/^(\* )(.{1,})/	<li>\2<\/li>/" | \
perl -0777p -e "s/((	<li>.{1,}<\/li>\n?){1,})/<ul>\n\1<\/ul>/g" | \
sed -E "s/^([0-9]{1,}\. )(.{1,})/	<li>\2<\/li>/" | \
perl -0777p -e "s/(((	<li>.{1,}<\/li>\n?){1,}|	*(\*.{1,}|[0-9]{1,}\..{1,})\n?){1,})/<ol>\n\1\n<\/ol>\n/gm" | \
perl -0777p -e "s/<ul>\n<ol>/<ul>/gm" | \
perl -0777p -e "s/<\/ol>\n<\/ul>/<\/ul>/gm" | \
sed -E "s/^(	{1,6})(\* )(.{1,})/\1	<li>\3<\/li>/" | \
perl -0777p -e "s/^(((	{1,})	<li>.{1,}<\/li>\n?){1,})/\3<ul>\n\1\3<\/ul>\n/gm" | \
perl -0777p -e "s/^(((	{2,})	<li>.{1,}<\/li>\n?){1,})/\3<ul>\n\1\3<\/ul>\n/gm" | \
perl -0777p -e "s/^(((	{3,})	<li>.{1,}<\/li>\n?){1,})/\3<ul>\n\1\3<\/ul>\n/gm" | \
perl -0777p -e "s/^(((	{4,})	<li>.{1,}<\/li>\n?){1,})/\3<ul>\n\1\3<\/ul>\n/gm" | \
perl -0777p -e "s/^(((	{5,})	<li>.{1,}<\/li>\n?){1,})/\3<ul>\n\1\3<\/ul>\n/gm" | \
perl -0777p -e "s/^(((	{6,})	<li>.{1,}<\/li>\n?){1,})/\3<ul>\n\1\3<\/ul>\n/gm" | \
perl -pe "s/^(	{1,6})([0-9]{1,}. )(.{1,})/\1	<nli>\3<\/nli>/" | \
perl -0777p -e "s/^(((	{1,})	<nli>.{1,}<\/nli>\n?){1,})/\3<ol>\n\1\3<\/ol>\n/gm" | \
perl -0777p -e "s/^(((	{2,})	<nli>.{1,}<\/nli>\n?){1,})/\3<ol>\n\1\3<\/ol>\n/gm" | \
perl -0777p -e "s/^(((	{3,})	<nli>.{1,}<\/nli>\n?){1,})/\3<ol>\n\1\3<\/ol>\n/gm" | \
perl -0777p -e "s/^(((	{4,})	<nli>.{1,}<\/nli>\n?){1,})/\3<ol>\n\1\3<\/ol>\n/gm" | \
perl -0777p -e "s/^(((	{5,})	<nli>.{1,}<\/nli>\n?){1,})/\3<ol>\n\1\3<\/ol>\n/gm" | \
perl -0777p -e "s/^(((	{6,})	<nli>.{1,}<\/nli>\n?){1,})/\3<ol>\n\1\3<\/ol>\n/gm" | \
perl -pe "s/<(\/)?nli>/<\1li>/" #\
#>> $2
}

to_man()
{
[ "$1" = "-h" ] && printf "Examples:\n./mdroff file.md | groff -ms -e -k -Tpdf > output.pdf\n\nThe -n option will turn all heading into non-numerical headings.\n"&& exit
whole_file=$(cat "$1")
header=$(echo "$whole_file" | grep -e '---' -Tn | awk '{ print $1 }' | sed 's/://g')

[ -n "$header" ] && content=$(echo "$whole_file" | tail -n $(($(echo "$whole_file" | wc -l) - $(echo "$header" | tail -n1)))) || content="$whole_file"

content=$(echo "$content" | sed -e 's/^* \(.*\)/.TP\n\1/g' -e 's/^# \(.*\)/.SH\n\1/g' -e 's/^$/.PP/g')
	content=$(echo "$content" |
	sed -z 's/.PP\n.NH/.NH/g' |
	sed -z 's/\(.PP\n\)\{2,\}/.PP\n/g' |
	sed -e 's/[*_]\{3\}\([^*-]*\)[*_]\{3\}\(.\)\{0,1\}/\n.BI "\1" \2\n/g' |
	sed -e 's/[*_]\{2\}\([^*-]*\)[*_]\{2\}\(.\)\{0,1\}/\n.B "\1" \2\n/g' |
	sed -e 's/[*_]\([^*-]*\)[*_]\(.\)\{0,1\}/\n.I "\1" \2\n/g' |
	sed '/^$/d')

# parse Header
[ "$(echo "$header" | head -n 1)" = "1" ] && header=$(echo "$whole_file" | head -n "$(echo "$header" | tail -n 1)") #| sed '/^---$/d')

[ -n "$header" ] && title=$(echo "$header" | grep title | sed 's/--- title: //g' | sed 's/ /_/g')
[ -n "$header" ] && author=$(echo "$header" | grep author | sed 's/--- author: //g')
[ -n "$header" ] && date=$(echo "$header" | grep date | sed 's/--- date: //g')

[ -n "$title" ] && [ -n "$author" ] && [ -n "$date" ] && printf '.TH %s "1" "%s" "%s" "User Commands"\n' "$title" "$date" "$author"
printf '%s\n' "$content"
}

#to_roff $1

#case $1 in
#    -roff) to_roff $2 | groff -ms -e -Tpdf > $3;;
#    *) echo "hello world" ;;
#esac

to_news()
{
#[ "$1" = "-h" ] && printf "help message here\n" && exit
conf=$(head -n 8 "$1")

name=$(echo "$conf" | grep "name" | sed 's/name=//g')
price=$(echo "$conf" | grep "price" | sed 's/price=//g')
location=$(echo "$conf" | grep "location" | sed 's/location=//g')
title=$(echo "$conf" | grep "title" | sed 's/title=//g')
volume=$(echo "$conf" | grep "volume" | sed 's/volume=//g')
issue=$(echo "$conf" | grep "issue" | sed 's/issue=//g')
phrase=$(echo "$conf" | grep "phrase" | sed 's/phrase=//g')

printf '\documentclass{article}\n\n\\usepackage[utf8]{inputenc}\n\\usepackage[T1]{fontenc}\n\\usepackage{microtype}\n\n\\usepackage{newspaper}\n\n\\date{\\today}\n' >> tmp.txt
printf '\\currentvolume{%s}\n' "$volume" >> tmp.txt
printf '\\currentissue{%s}\n' "$issue" >> tmp.txt
printf '\\SetPaperName{%s}\n' "$name" >> tmp.txt
printf '\\SetHeaderName{%s}\n' "$title" >> tmp.txt
printf '\\SetPaperLocation{%s}\n' "$location" >> tmp.txt
printf '\\SetPaperSlogan{"%s"}\n' "$phrase" >> tmp.txt
printf '\\SetPaperPrice{%s}\n' "$price" >> tmp.txt
printf '\\usepackage{graphicx}\n\\usepackage{multicol}\n\\usepackage{picinpar}\n\\usepackage{newspaper-mod}\n\n\\begin{document}\n\\maketitle\n\n\\begin{multicols}{3}\n\n' >> tmp.txt

while read LIN
do
    if [ "${LIN%% *}" = "#" ]; then
	printf '\\byline{%s}\n' "${LIN#* }" >> tmp.txt
    elif [ "${LIN%% *}" = "##" ]; then
	printf '\\headline{%s}\n' "${LIN#* }" >> tmp.txt
    elif [ "$LIN" = "---" ]; then
	printf '\\closearticle' >> tmp.txt
    elif [ "${LIN%% *}" = "by:" ]; then
	printf '{%s}\n' "${LIN#* }" >> tmp.txt
    elif [ "${LIN%\[*}" = "!" ]; then
	zz=$(echo ${LIN%\]*})
	aa=$(echo ${LIN#*\(})
	printf '\\begin{window}[1,c,\\includegraphics[width=1.0in]{%s}, \\centerline{%s}]\n\n\\end{window}\n' "${zz#*\[}" "${aa%\)*}" >> tmp.txt
    else
	printf '%s\n' "$LIN" >> tmp.txt
    fi

done < $1

printf '\\end{multicols}\n\n\\end{document}' >> tmp.txt
sed '/name=/d;/price=/d;/location=/d;/title=/d;/volume=/d;/issue=/d;/phrase=/d;' tmp.txt

whole=$(cat tmp.txt)
rm tmp.txt
printf '%s\n' "$whole"
}

#mknews $1 # | pdflatex --
#rm *.aux
#rm *.log

to_roff()
{
[ "$1" = "-h" ] && printf "Examples:\n./mdroff file.md | groff -ms -e -k -Tpdf > output.pdf\n\nThe -n option will turn all heading into non-numerical headings.\n"&& exit
whole_file=$(cat "$1")
header=$(echo "$whole_file" | grep -e '---' -Tn | awk '{ print $1 }' | sed 's/://g')

[ -n "$header" ] && content=$(echo "$whole_file" | tail -n $(($(echo "$whole_file" | wc -l) - $(echo "$header" | tail -n1)))) || content="$whole_file"

content=$(echo "$content" | sed -e 's/^# \(.*\)/.SH\n\1/g' -e 's/^## \(.*\)/.SH 2\n\1/g' -e 's/^### \(.*\)/.SH 3\n\1/g' -e 's/^#### \(.*\)/.SH 4\n\1/g' -e 's/^##### \(.*\)/.SH 5\n\1/g' -e 's/^###### \(.*\)/.SH 6\n\1/g' -e 's/^$/.PP/g') || content=$(echo "$content" | sed -e 's/^# \(.*\)/.SH\n\1/g' -e 's/^## \(.*\)/.SH 2\n\1/g' -e 's/^### \(.*\)/.SH 3\n\1/g' -e 's/^#### \(.*\)/.SH 4\n\1/g' -e 's/^##### \(.*\)/.SH 5\n\1/g' -e 's/^###### \(.*\)/.SH 6\n\1/g' -e 's/^$/.PP/g')
	content=$(echo "$content" |
	sed -z 's/.PP\n.NH/.NH/g' |
	sed -z 's/\(.PP\n\)\{2,\}/.PP\n/g' |
	sed -e 's/[*_]\{3\}\([^*-]*\)[*_]\{3\}\(.\)\{0,1\}/\n.BI "\1" \2\n/g' |
	sed -e 's/[*_]\{2\}\([^*-]*\)[*_]\{2\}\(.\)\{0,1\}/\n.B "\1" \2\n/g' |
	sed -e 's/[*_]\([^*-]*\)[*_]\(.\)\{0,1\}/\n.I "\1" \2\n/g' |
	sed -e 's/^```math$/.EQ/g' -e 's/^```$/.EN/g' |
	sed -e 's/^```abstract$/.AB/g' -e 's/^```end$/.AE/g' |
	sed '/^$/d')

# parse Header
[ "$(echo "$header" | head -n 1)" = "1" ] && header=$(echo "$whole_file" | head -n "$(echo "$header" | tail -n 1)") #| sed '/^---$/d')

[ -n "$header" ] && title=$(echo "$header" | grep title | sed 's/--- title: //g')
[ -n "$header" ] && author=$(echo "$header" | grep author | sed 's/--- author: //g')
[ -n "$header" ] && date=$(echo "$header" | grep date | sed 's/--- date: //g')
[ -n "$header" ] && institution=$(echo "$header" | grep institution | sed 's/--- institution: //g')

[ -n "$title" ] && printf '.TL\n%s\n' "$title"
[ -n "$author" ] && printf '.AU\n%s\n' "$author"
[ -n "$date" ] && printf '.DA\n%s\n' "$date"
[ -n "$institution" ] && printf '.AI\n%s\n' "$institution"
printf '%s\n' "$content"
}

#to_roff $1

#case $1 in
#    -roff) to_roff $2 | groff -ms -e -Tpdf > $3;;
#    *) echo "hello world" ;;
#esac

to_tex()
{
[ "$1" = "-h" ] && printf "Example: mdtex input.md | pdflatex" && exit

printf 'documentclass[14pt]{article}\nusepackage[utf8]{inputenc}\nusepackage[a4paper,total={6.5in,9.5in}]{geometry}\n3begin{document}\n\n' > tmp.txt
cat $1 | \
sed -E "s/(\*\*)(.{1,})(\*\*)/\\\textbf{\2}/" | \
sed -E "s/(\*)(.{1,})(\*)/\\\textit{\2}/" | \
sed -E "s/(### )(.{1,})/\\\subsubsection{\2}/" | \
sed -E "s/(## )(.{1,})/\\\subsection{\2}/" | \
sed -E "s/(# )(.{1,})/\\\section{\2}/" | \
sed  "s/{break}/\\\hfill\\\break/g" >> tmp.txt
printf '\n3end{document}\n' >> tmp.txt

cat tmp.txt | sed -e "s/documentclass/\\\documentclass/g" -e "s/usepackage/\\\usepackage/g" -e "s/3begin/\\\begin/g" -e "s/3end/\\\end/g"
#> $2
rm tmp.txt
#sed -E "s/^(\* )(.{1,})/	<li>\2<\/li>/" | \
}

case $1 in
    -roff) to_roff $2 | groff -ms -e -Tpdf > ou1.pdf ;;
    -html) to_html $2 > out1.html ;;
    -news) to_news $2 | pdflatex ;;
    -man) to_man $2 > out1.1 ;;
    -tex) to_tex $2 > out1.tex ;;
    *) echo "help message here." ;;
esac
